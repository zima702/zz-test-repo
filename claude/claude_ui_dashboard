import React, { useEffect } from ‘react’;
import { Link } from ‘react-router-dom’;
import { observer } from ‘mobx-react-lite’;
import requestStore from ‘../stores/RequestStore’;

const Dashboard = ({ userRole = ‘requester’ }) => {
useEffect(() => {
requestStore.fetchRequests();
}, []);

useEffect(() => {
requestStore.fetchRequests();
}, [requestStore.filter]);

const handleFilterChange = (e) => {
requestStore.setFilter(e.target.value);
};

const getStatusClass = (status) => {
const statusClasses = {
‘Draft’: ‘bg-gray-100 text-gray-800’,
‘Submitted’: ‘bg-blue-100 text-blue-800’,
‘Approved’: ‘bg-green-100 text-green-800’,
‘Processing’: ‘bg-yellow-100 text-yellow-800’,
‘Completed’: ‘bg-emerald-100 text-emerald-800’,
‘Rejected’: ‘bg-red-100 text-red-800’,
‘Failed’: ‘bg-red-100 text-red-800’
};
return statusClasses[status] || ‘bg-gray-100 text-gray-800’;
};

const handleApprovalAction = async (requestId, action) => {
if (action === ‘approve’) {
await requestStore.approveRequest(requestId);
} else if (action === ‘reject’) {
// This would typically open a modal for rejection reason
const reason = prompt(‘Please provide a reason for rejection:’);
if (reason) {
await requestStore.rejectRequest(requestId, reason);
}
}
// Refresh the list
requestStore.fetchRequests();
};

if (requestStore.loading) {
return (
<div className="min-h-screen bg-gray-50 flex items-center justify-center">
<div className="text-center">
<div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
<p className="mt-4 text-gray-600">Loading requests…</p>
</div>
</div>
);
}

return (
<div className="min-h-screen bg-gray-50">
<div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
{/* Header */}
<div className="bg-white shadow-sm rounded-lg p-6 mb-6">
<div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
<div>
<h1 className="text-3xl font-bold text-gray-900">
Client Access Request Management
</h1>
<p className="mt-2 text-gray-600">
Manage and track client access requests
</p>
</div>
<div className="mt-4 sm:mt-0">
<Link
to="/request/new"
className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
>
<svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
</svg>
Create New Request
</Link>
</div>
</div>
</div>

```
    {/* Message Display */}
    {requestStore.message.text && (
      <div className={`mb-6 p-4 rounded-md ${
        requestStore.message.type === 'success' 
          ? 'bg-green-50 border border-green-200 text-green-800' 
          : 'bg-red-50 border border-red-200 text-red-800'
      }`}>
        <div className="flex">
          <div className="flex-shrink-0">
            {requestStore.message.type === 'success' ? (
              <svg className="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
            ) : (
              <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            )}
          </div>
          <div className="ml-3">
            <p className="text-sm font-medium">{requestStore.message.text}</p>
          </div>
          <div className="ml-auto pl-3">
            <button
              onClick={() => requestStore.clearMessage()}
              className="inline-flex text-gray-400 hover:text-gray-500"
            >
              <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    )}

    {/* Filters */}
    <div className="bg-white shadow-sm rounded-lg p-6 mb-6">
      <div className="flex items-center space-x-4">
        <label className="text-sm font-medium text-gray-700">Filter by Status:</label>
        <select
          value={requestStore.filter}
          onChange={handleFilterChange}
          className="block w-48 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          <option value="all">All Requests</option>
          <option value="draft">Draft</option>
          <option value="submitted">Submitted</option>
          <option value="approved">Approved</option>
          <option value="processing">Processing</option>
          <option value="completed">Completed</option>
          <option value="rejected">Rejected</option>
          <option value="failed">Failed</option>
        </select>
      </div>
    </div>

    {/* Requests Table */}
    <div className="bg-white shadow-sm rounded-lg overflow-hidden">
      {requestStore.filteredRequests.length === 0 ? (
        <div className="text-center py-12">
          <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <h3 className="mt-2 text-sm font-medium text-gray-900">No requests found</h3>
          <p className="mt-1 text-sm text-gray-500">
            No requests match the current filter criteria.
          </p>
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Request ID
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Client Name
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Request Type
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Created Date
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {requestStore.filteredRequests.map((request) => (
                <tr key={request.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600">
                    <Link to={`/request/${request.id}`} className="hover:text-blue-500">
                      {request.id}
                    </Link>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {request.clientName}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {request.requestType}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusClass(request.status)}`}>
                      {request.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(request.createdDate).toLocaleDateString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="flex items-center space-x-2">
                      <Link
                        to={`/request/${request.id}`}
                        className="text-blue-600 hover:text-blue-500"
                      >
                        View
                      </Link>
                      {(request.status === 'Draft' || request.status === 'Rejected') && (
                        <Link
                          to={`/request/${request.id}/edit`}
                          className="text-indigo-600 hover:text-indigo-500"
                        >
                          Edit
                        </Link>
                      )}
                      {userRole === 'approver' && request.status === 'Submitted' && (
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => handleApprovalAction(request.id, 'approve')}
                            disabled={requestStore.actionLoading}
                            className="text-green-600 hover:text-green-500 disabled:opacity-50"
                          >
                            Approve
                          </button>
                          <button
                            onClick={() => handleApprovalAction(request.id, 'reject')}
                            disabled={requestStore.actionLoading}
                            className="text-red-600 hover:text-red-500 disabled:opacity-50"
                          >
                            Reject
                          </button>
                        </div>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  </div>
</div>
```

);
};

export default observer(Dashboard);